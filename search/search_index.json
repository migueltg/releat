{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ReLeAT","text":"<p>REinforcement LEarning for Algorithmic Trading is a python framework for learning medium frequency trading algorithms for MetaTrader 5 (other trading platforms are planned for the future).</p> <p>DISCALIMER: The information provided herein is for educational and informational purposes only and should not be construed as financial advice. It is not a recommendation to trade or invest real money. Always exercise your own judgment and use common sense when making financial decisions.</p>"},{"location":"#vision","title":"Vision","text":"<p>To build a collaborative community where software engineers, data scientists, RL researchers, quants and finance and economic experts can share knowledge. This framework covers the end-to-end process including:</p> <ul> <li>extracting data from a MetaTrader5</li> <li>building custom features from tick data</li> <li>gym environment factory to simulate the trading environment</li> <li>training a reinforcement learning and/or machine learning algorithms (Tensorflow)</li> <li>deploying trained models</li> <li>executing trades</li> </ul> <p>In progress:</p> <ul> <li>additional platforms including Interactive Brokers and Binance</li> <li>custom features for candle data and macroeconomic events</li> <li>incoporate other deep learning frameworks such as PyTorch</li> <li>better sofware development practices, CI/CD, MLOps, tests</li> <li>examples for deployment to cloud to AWS and GCP</li> <li>monitoring and observability</li> </ul>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>A single container for developing, training, deploying and trading for MetaTrader5 for Linux and Windows (via WSL)</li> <li>A simple command line interface to orchestrate the end-to-end process.</li> <li>Configuration files that define each step for a specific agent. These are structured to facilitate rapid experimentation and easy integration with Ray's Tune module. types, etc.</li> <li>Focuses on Medium Frequency Trading strategies (&gt;1 second and &lt;1 day) using tick data as the input for each step. General latency of the system is ~0.1-3s depending on the complexity of feature engineering and model and resources available.</li> <li>In contrast to most other python packages that focus on a deep coverage on one part of the algorithmic trading process, this framework focuses on rapid experimentation lifecycles from idea to deploying and tracking paper trades.</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>Note this is still a work in progress.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - instructions on how to build or download the docker container</li> <li>Basic Usage - an example on how to build a feature set, train, deploy and trade a RL strategy for EURUSD on a metaquotes demo account</li> </ul>"},{"location":"#development-notes","title":"Development Notes","text":"<ul> <li>Containerisation - detailed explanation on the design choices for the DockerFile</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>Troubleshooting provides guidance on some the common issues that might arise</p>"},{"location":"#contributing","title":"Contributing","text":"<p>ReLeAT is an open-source project and we're always looking for contributors and collaborators to make this project even better! Contribution Guidelines are in progress.</p>"},{"location":"#license","title":"License","text":"<p>ForexRL is distributed under the MIT License. Feel free to use, modify, and share the library according to the terms outlined in the license.</p>"},{"location":"development_notes/mt5_api/","title":"Mt5 api","text":"<p>winedbg --command \"info proc\"</p> <p>from setproctitle import setproctitle, setthreadtitle setproctitle(f\"mt5_api_{symbol}\") setthreadtitle(f\"mt5_api_{symbol}\")</p> <p>https://sentry.io/answers/flask-getting-post-data/</p> <p>https://www.mql5.com/en/articles/5691</p>"},{"location":"development_notes/releat_dockerfile/","title":"Building the ReLeAT DockerFile","text":"<p>Summary of design considerations for the Dockerfile that has the following features:</p> <ul> <li>Install and run MetaTrader5 and python in wine</li> <li>Rllib in linux container with Nividia GPU enabled</li> <li>Poetry to manage package dependency</li> <li>Aerospike as databse tool</li> </ul>"},{"location":"development_notes/releat_dockerfile/#key-points","title":"Key Points","text":"<ul> <li> <p>Check aerospike versions because they tend to be updated quite frequently</p> </li> <li> <p>User the repo folder as the context when building and running</p> </li> <li> <p>On first start up of MetaTrader5, you need to manually click on the 'Accounts' button to allow it to connect to broker servers. After logging in you need to manually click the 'Allow Autotrading' button - slightly weird behaviour from running MetaTrader5 on wine.</p> </li> <li> <p>Future work - updating packages to latest version</p> </li> </ul>"},{"location":"development_notes/releat_dockerfile/#design-considerations","title":"Design Considerations","text":""},{"location":"development_notes/releat_dockerfile/#base-layer","title":"Base layer","text":"<ul> <li> <p>Ubuntu 20.04 was used as the base image - could upgrade in the future.</p> </li> <li> <p><code>DEBIAN_FRONTEND=noninteractive</code> to accept all default options when installing and removing software (i.e. apt-get install). This prevents questions from blocking the installation process</p> </li> <li> <p>Set environment paths so that Miniconda, MetaTrader5 and python environments are saved in the correct place and/or easily searchable.</p> </li> <li> <p><code>MT5_PATH</code> is saved as an environment variable because the entrypoint script check whether this file exists. If not, then it will install MT5</p> </li> <li> <p>Set environment display to 0 to pass through screen. Not sure if this is necessary. But some wine windows apps (i.e. Python and MetaTrader5) cannot be installed headlessly</p> </li> <li> <p>Tensorflow version is set to 2.11.0 - could be upgraded in the future</p> </li> <li> <p>Python version is set to 2.10.10 - couldn't upgrade this to 2.11 because at the time, the aerospike python package and rllib was incompatible / not stable</p> </li> </ul> <pre><code>FROM ubuntu:focal\n\nENV DEBIAN_FRONTEND=noninteractive\nENV TZ=Etc/UTC\n\nENV PATH=\"${PATH}:/root/miniconda3/bin:/root/.local/bin\"\n# Location of linux python env\nENV PY_PATH=\"./.venv\"\n# Metatrader path\nENV MT5_PATH=\"/root/.wine/drive_c/Program Files/MetaTrader 5/terminal64.exe\"\n\nENV DISPLAY :0\n\n# Tensorflow version\nENV TF_V=\"2.11.0\"\n# Python version\nENV PY_V=\"3.10.10\"\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#wine","title":"Wine","text":"<p>Wine enables the running of Windows software on Linux systems. For other options, see this guideline for installing and running wine.</p> <ul> <li> <p><code>WINEDLLOVERRIDES=\"mscoree,mshtml=\"</code> disables the Mono installer dialog allowing it to be installed in the Dockerfile headlessly instead of in the entrypoint script.</p> </li> <li> <p><code>WINEDEBUG=\"fixme-all,err-all\"</code> suppresses most of the warnings, reducing log volume</p> </li> <li> <p><code>WINEPREFIX=\"/root/.wine\"</code> helps processes find the installation location of wine</p> </li> <li> <p><code>dpkg --add-architecture i386</code> enables the installation of multiarch binaries</p> </li> <li> <p>install development version of wine - could also use stable</p> </li> <li> <p><code>winecfg -v win10</code> sets the windows 10, necessary for python and MT5</p> </li> <li> <p><code>wineserver -w</code> waits until currently running wineserver terminates. Not sure if this is necessary</p> </li> </ul> <pre><code># Wine configs\nENV WINEDLLOVERRIDES=\"mscoree,mshtml=\"\nENV WINEDEBUG=\"fixme-all,err-all\"\nENV WINEPREFIX=\"/root/.wine\"\n\n\n# Install wine\nRUN apt-get update \\\n&amp;&amp; apt-get install -y wget gnupg2 dialog apt-utils software-properties-common curl make git tzdata \\\n&amp;&amp; dpkg --add-architecture i386 \\\n&amp;&amp; mkdir -pm755 /etc/apt/keyrings \\\n&amp;&amp; wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key \\\n&amp;&amp; wget -nc https://dl.winehq.org/wine-builds/ubuntu/dists/focal/winehq-focal.sources \\\n&amp;&amp; mv winehq-focal.sources /etc/apt/sources.list.d/ \\\n&amp;&amp; apt-get update \\\n&amp;&amp; apt-get install -y --install-recommends winehq-devel \\\n&amp;&amp; apt-get remove -y winbind \\\n&amp;&amp; apt-get install -y winbind \\\n&amp;&amp; rm -rf /var/lib/apt/lists/* /winehq.key \\\n&amp;&amp; winecfg -v win10 \\\n&amp;&amp; wineserver -w\n</code></pre> <p>Install mono and gecko, wine packages that a necessary to make windows applications work. Depending on what version of wine is installed, install the appropriate mono version and gecko version. Reboot and remove installation files once installed</p> <pre><code># Install wine mono and gecko\nRUN wget https://dl.winehq.org/wine/wine-mono/8.0.0/wine-mono-8.0.0-x86.msi \\\n&amp;&amp; wget https://dl.winehq.org/wine/wine-gecko/2.47.4/wine-gecko-2.47.4-x86.msi \\\n&amp;&amp; wget https://dl.winehq.org/wine/wine-gecko/2.47.4/wine-gecko-2.47.4-x86_64.msi \\\n&amp;&amp; wineboot \\\n&amp;&amp; wine wine-mono-8.0.0-x86.msi /quiet \\\n&amp;&amp; wine wine-gecko-2.47.4-x86.msi /quiet \\\n&amp;&amp; wine wine-gecko-2.47.4-x86_64.msi /quiet \\\n&amp;&amp; rm wine-mono-8.0.0-x86.msi wine-gecko-2.47.4-x86.msi wine-gecko-2.47.4-x86_64.msi\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#conda-and-poetry","title":"Conda and Poetry","text":"<p>Miniconda and poetry for manage python packages. Both are required because of GPU. Miniconda is used to install nvidia packages whilst poetry is for pure python. <code>eval \"$(conda shell.bash hook)\"</code> sets up shell functions for Conda.</p> <pre><code># Install Miniconda and Poetry\nRUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n&amp;&amp; mkdir /root/.conda \\\n&amp;&amp; bash Miniconda3-latest-Linux-x86_64.sh -b \\\n&amp;&amp; rm -f Miniconda3-latest-Linux-x86_64.sh \\\n&amp;&amp; eval \"$(conda shell.bash hook)\" \\\n&amp;&amp; curl -sSL https://install.python-poetry.org | python3 -\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#aerospike","title":"Aerospike","text":"<p>Aerospike is a real-time in memory database, which will be used to for storing observations for the reinforment learning training process. This is installed last because version are updated frequently, so we only need to rebuild the last layer.</p> <p>Note: check aerospike versions regularly</p> <pre><code># aerospike server version\nARG AS_V=\"6.4.0.1\"\n# aerospike tool version\nARG AT_V=\"9.0.0\"\n# Installing aerospike\nRUN wget -O aerospike.tgz https://download.aerospike.com/artifacts/aerospike-server-community/${AS_V}/aerospike-server-community_${AS_V}_tools-${AT_V}_ubuntu20.04_x86_64.tgz \\\n&amp;&amp; tar -xvf aerospike.tgz \\\n&amp;&amp; cd aerospike-server-community_${AS_V}_tools-${AT_V}_ubuntu20.04_x86_64 \\\n&amp;&amp; ./asinstall \\\n&amp;&amp; cd .. \\\n&amp;&amp; rm aerospike.tgz\n\nENTRYPOINT [\"/bin/bash\"]\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#entrypoint","title":"Entrypoint","text":"<p>The default entrypoint is the bash terminal. An entrypoint script is included in that folder and run depending on how you plan on accessing the container. The next section explains each component of the entrypoint script, followed by the different ways to build and run the container</p>"},{"location":"development_notes/releat_dockerfile/#entrypoint-logic","title":"Entrypoint logic","text":"<ul> <li><code>#!/bin/bash</code> - when using VSCode's devcontainer functionality must use bash because sh doesn't work, not sure why</li> </ul>"},{"location":"development_notes/releat_dockerfile/#linux-python-environment","title":"Linux python environment","text":"<ul> <li> <p>check if <code>./.venv</code> folder already exists, if so we can skip the installation of python libraries</p> </li> <li> <p>Create python environment. Note this is done in entrypoint rather than Dockerfile so that the installed files are in the same location as the repo within the binded mount. Works well for developing in VSCode's devcontainer, need to test more when using other IDEs.</p> </li> <li> <p>Currently we're still using an old version of tensorflow - see notes below for future version for python</p> </li> <li> <p>For GPU usage, we need conda to install cuda packages. Then everything else can be installed by pip</p> </li> <li> <p>Make sure to lock tensorflow version in poetry lock file, then install all other packages using poetry</p> </li> </ul> <pre><code>if test -d \"./.venv\"; then\necho \"Conda environments installed\"\nelse\necho \"install linux packages\"\nconda create --prefix ${PY_PATH} python=${PY_V} -y\n    eval \"$(conda shell.bash hook)\"\nconda activate ${PY_PATH}\n\n# Install linux tensorflow=2.11.0\nconda install -c conda-forge cudatoolkit=11.2.2 cudnn=8.1.0 -y\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/\n    mkdir -p $CONDA_PREFIX/etc/conda/activate.d\n    echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/' &gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh \\\nLD_LIBRARY_PATH=/content/conda-env/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64\n    pip install --upgrade pip\n    pip install tensorflow==${TF_V}\n\n# Install linux python packages\nconda install -c anaconda -y\n    poetry init --python=~${PY_V}\npoetry add --lock tensorflow=${TF_V}\npoetry install --with rl\n    pre-commit install\n\nfi\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#wine-packages","title":"Wine packages","text":"<ul> <li> <p>Install same version of python in wine. We need this to programmatically extract data and trade in MT5</p> </li> <li> <p>Install python packages via poetry, note this means that when we deploy tensorflow models, we will be using cpu version only. Currently designed to be a monolith to simplify networking between applications / container. Might look at a microservice design in the future</p> </li> <li> <p>Needs to be a fresh install each time for the dev container because the gui works right after install, however doesn't work when you close and re-open vscode. possibly a wine / linux / wsl issue</p> </li> <li> <p>Keep install files for now because deleting them seems to cause an error - I suspect some kind of race condition where the file is deleted before install is complete.</p> </li> <li> <p>Other references: https://github.com/python-poetry/poetry/issues/5037</p> </li> <li> <p>Install MT5</p> </li> </ul> <pre><code># Installing wine python\necho \"installing wine python\" \\\n&amp;&amp; wget https://www.python.org/ftp/python/${PY_V}/python-${PY_V}-amd64.exe \\\n&amp;&amp; wine python-${PY_V}-amd64.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0 \\\n# &amp;&amp; rm python-${PY_V}-amd64.exe \\\n&amp;&amp; echo \"Python installed successfully\"\n\n# Installing wine python packages\necho \"installing python packages\" \\\n&amp;&amp; wine pip install poetry \\\n&amp;&amp; wine poetry config virtualenvs.create false \\\n&amp;&amp; wine poetry config virtualenvs.in-project false \\\n&amp;&amp; wine poetry install --only mt5\n\n# Installing MT5\necho \"Installing MT5\" \\\n&amp;&amp; wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5setup.exe \\\n&amp;&amp; wine mt5setup.exe /auto \\\n# &amp;&amp; rm mt5setup.exe \\\n&amp;&amp; echo \"MT5 installed successfully\"\n\nfi\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#side-notes","title":"Side notes","text":"<ul> <li>Future versions of tensorflow should be installed like this:</li> </ul> <pre><code>    conda install -c conda-forge cudatoolkit=11.8.0\n    python3 -m pip install nvidia-cudnn-cu11==8.6.0.163 tensorflow==2.13.0\n    mkdir -p $CONDA_PREFIX/etc/conda/activate.d\n    echo 'CUDNN_PATH=$(dirname $(python -c \"import nvidia.cudnn;print(nvidia.cudnn.__file__)\"))' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n    echo 'export LD_LIBRARY_PATH=$CUDNN_PATH/lib:$CONDA_PREFIX/lib/:$LD_LIBRARY_PATH' &gt;&gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n    source $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh\n</code></pre> <ul> <li>start aerospike - may leave this for later because we may want to put aerospike configs into the folder of each agent / experiment</li> </ul> <pre><code>start aerospike\nasd --config-file ./infrastructure/aerospike.conf\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#building-the-container","title":"Building the Container","text":"<p>Using the repo folder as your context / current working directory, the DockerFile can be built by the following command.</p> <pre><code>docker build -t releat -f ./infrastructure/releat/Dockerfile .\n</code></pre>"},{"location":"development_notes/releat_dockerfile/#running-the-container","title":"Running the Container","text":"<p>This container can be used for development in 2 main ways:</p> <ul> <li> <p>VSCode's devcontainer functionality</p> </li> <li> <p>docker container with a mount</p> </li> </ul>"},{"location":"development_notes/releat_dockerfile/#vscode-devcontainer","title":"VSCode devcontainer","text":"<p>If you use VSCode as your IDE, you can use the Dev Container extension, using the provided specification in the <code>.devcontainer</code> folder. See the official guide on how to start it up.</p> <ul> <li> <p>Note that in the <code>.devcontainer/devcontainer.json</code>, we invoke the entrypoint script after the docker image has been started up to install the project and MetaTrader5</p> </li> <li> <p>Upon first open, you need to click autotrading + click add account in order for MT5 to connect to servers, otherwise it just hangs</p> </li> <li> <p>If the wine gui is frozen or you can't click on buttons or resizing windows causes distortion, restart your linux or wsl machine or container</p> </li> </ul> <p>Side Notes:</p> <ul> <li>Future low priority work to make it more stable: If Developing on Windows system via WSL, to pass through Metatrader GUI, follow this guide and this discussion</li> </ul>"},{"location":"development_notes/releat_dockerfile/#docker-run","title":"docker run","text":"<p>Assumes your context / current working directory is the repo folder. We can build the docker image by:</p> <pre><code>docker run \\\n--net host \\\n-v /tmp/.X11-unix:/tmp/.X11-unix \\\n-v $(pwd):/releat \\\n-e DISPLAY \\\n-it \\\n--name releat \\\n--gpus=all \\\nreleat215/releat:1.0 \\\n-c './releat/infrastructure/releat/entrypoint.sh &amp;&amp; cd releat &amp;&amp; /bin/bash'\n</code></pre> <ul> <li> <p><code>--net host</code> container shares network with the host, meaning we don't need to manually listen to ports - i think this also allows the container to access the internet</p> </li> <li> <p><code>-v /tmp/.X11-unix:/tmp/.X11-unix</code> passes through the display. Necessary because MT5 can't be run headlessly (without lots of tinkering)</p> </li> <li> <p><code>-v $(pwd):/releat</code> mounts</p> </li> <li> <p><code>-e DISPLAY</code> Maybe its necessary to pass through the display</p> </li> <li> <p><code>-v $(pwd):/releat</code> mounts the repo to the corresponding location in the container</p> </li> <li> <p><code>--gpus=all</code> passes through GPUs from your machine to the container</p> </li> <li> <p>Still need add in code that binds the location of the repo / fix this docker run code</p> </li> </ul>"},{"location":"examples/mt5-api-data-extract/","title":"Data extraction via MT5 Api","text":"In\u00a0[\u00a0]: Copied! <pre>from releat.utils.configs.constants import mt5_api_port_map\nfrom concurrent.futures import ThreadPoolExecutor\nfrom releat.workflows.service_manager import kill_processes, get_pids, stop_mt5\nfrom releat.utils.logging import get_logger\nfrom releat.data.extractor import download_tick_data\nimport logging\nfrom datetime import datetime\nlogger = get_logger(__name__, log_level=logging.INFO)\n</pre> from releat.utils.configs.constants import mt5_api_port_map from concurrent.futures import ThreadPoolExecutor from releat.workflows.service_manager import kill_processes, get_pids, stop_mt5 from releat.utils.logging import get_logger from releat.data.extractor import download_tick_data import logging from datetime import datetime logger = get_logger(__name__, log_level=logging.INFO) In\u00a0[\u00a0]: Copied! <pre># start date - datetime must be in this format\ndt0 = datetime.strptime(\"2023-09-06 10:00:00.000\",\"%Y-%m-%d %H:%M:%S.%f\")\n# end date - excludes boundary\ndt1 = datetime.strptime(\"2023-09-06 10:01:01.001\",\"%Y-%m-%d %H:%M:%S.%f\")\n# data_mode - either demo or live\ndata_mode = \"demo\"\n# check api - whether to check the connection, if failed, it will try to initialize the\n# connection. checking is skipped at inference\ncheck_api = False\n\ndl_args = []\n\nfor broker, port_map in mt5_api_port_map.items():\n    for symbol, port in port_map.items():\n        # general is the port used for other interactions with mt5, i.e. order and\n        # getting position\n        if symbol!='general':\n            dl_arg = [broker,symbol,dt0,dt1,data_mode,check_api]\n            dl_args.append(dl_arg)\n\nprint(\"An example of input list to the download_tick_data function:\")  \nprint(dl_args[0])\n</pre> # start date - datetime must be in this format dt0 = datetime.strptime(\"2023-09-06 10:00:00.000\",\"%Y-%m-%d %H:%M:%S.%f\") # end date - excludes boundary dt1 = datetime.strptime(\"2023-09-06 10:01:01.001\",\"%Y-%m-%d %H:%M:%S.%f\") # data_mode - either demo or live data_mode = \"demo\" # check api - whether to check the connection, if failed, it will try to initialize the # connection. checking is skipped at inference check_api = False  dl_args = []  for broker, port_map in mt5_api_port_map.items():     for symbol, port in port_map.items():         # general is the port used for other interactions with mt5, i.e. order and         # getting position         if symbol!='general':             dl_arg = [broker,symbol,dt0,dt1,data_mode,check_api]             dl_args.append(dl_arg)  print(\"An example of input list to the download_tick_data function:\")   print(dl_args[0]) In\u00a0[\u00a0]: Copied! <pre># show example output of function\ndownload_tick_data(*dl_args[1])\n</pre> # show example output of function download_tick_data(*dl_args[1]) In\u00a0[\u00a0]: Copied! <pre>pool = ThreadPoolExecutor(len(dl_args))\n</pre> pool = ThreadPoolExecutor(len(dl_args)) In\u00a0[\u00a0]: Copied! <pre>%%timeit\nfor dl_arg in dl_args:\n    download_tick_data(*dl_arg)\n</pre> %%timeit for dl_arg in dl_args:     download_tick_data(*dl_arg) In\u00a0[\u00a0]: Copied! <pre>%%timeit\nlist(pool.map(lambda p: download_tick_data(*p), dl_args))\n</pre> %%timeit list(pool.map(lambda p: download_tick_data(*p), dl_args)) In\u00a0[\u00a0]: Copied! <pre># kill mt5\nstop_mt5()\n</pre> # kill mt5 stop_mt5() In\u00a0[\u00a0]: Copied! <pre># kill mt5 api process ids\npids = get_pids(\"wineserver\")\nkill_processes(pids)\nprint(f\"mt5 apis stopped - process ids {pids} killed\")\n\n# kill wine processes\npids = get_pids(\"python.exe\")\nkill_processes(pids)\n</pre> # kill mt5 api process ids pids = get_pids(\"wineserver\") kill_processes(pids) print(f\"mt5 apis stopped - process ids {pids} killed\")  # kill wine processes pids = get_pids(\"python.exe\") kill_processes(pids)"},{"location":"examples/mt5-api-data-extract/#data-extraction-via-mt5-api","title":"Data extraction via MT5 Api\u00b6","text":"<p>Each trading symbol has its own process for the wine mt5 api. This is so that in production, we're able to reduce latency (at the cost of higher memory consumption) by pulling from one or more brokers in parallel.</p>"},{"location":"examples/mt5-api-data-extract/#important-start-mt5-apis","title":"IMPORTANT - start mt5 apis\u00b6","text":"<p>Before running this notebooks, first launch the mt5 apis from the docker terminal using the command:</p> <p><code>releat launch-all-mt5-apis</code></p> <p>Alternatively, you can run it from your local terminal and execute on your docker container, replace <code>&lt;container-name&gt;</code> with the name of the container, which should either be <code>releat</code> or <code>releat-dc</code> depending on how you set it up:</p> <p><code>docker exec -it &lt;container-name&gt; releat launch-all-mt5-apis</code></p> <p>Launching wine processes from jupyter notebooks is unstable and mostly fails to start</p>"},{"location":"examples/mt5-api-data-extract/#compare-data-extraction-speed","title":"Compare data extraction speed\u00b6","text":"<p>When run in parallel, the time taken to download data is at least 2x as fast as compared to in sequence. Note results will vary depending on internet speed and whether results are cached</p>"},{"location":"examples/mt5-api-data-extract/#clean-processes-by-deleting-mt5-instances-and-apis","title":"Clean processes by deleting MT5 instances and apis\u00b6","text":""},{"location":"getting_started/basic_usage/","title":"Basic Usage","text":"<p>This is an example of how to train and deploy a simple agent that trade EURUSD in a metaquotes demo account. The configurations for this agent can be found in <code>agents/t00001</code> and a more detailed explanation be found in the configuration documentation.</p> <p>Note: - example only works Monday to Friday GMT+2/3 due to metaquotes not allowing data extract or trades on weekend demo accounts. - Steps 4+ are blocking processes, so open a new terminal to run in parallel.</p>"},{"location":"getting_started/basic_usage/#1-connect-to-running-docker-container","title":"1) Connect to running docker container","text":"<p>If opening a new terminal, connect interactively to the running docker container:</p> <pre><code>docker exec -it releat /bin/bash\n</code></pre> <p>Note: - This assumes that the running container is called <code>releat</code></p>"},{"location":"getting_started/basic_usage/#2-start-services","title":"2) Start services","text":"<p>Starts services necessary to train, deploy and monitor the reinforcement learning trading agent: - Aerospike: In-memory database to store features and hyperparameters - Ray: Manages compute and provides RL training and inference logic - MT5: Download data and trade for forex and futures (depending on broker) - Tensorboard: Monitor RL training progress - Redis: In memory cache for storing RL predictions</p> <p>The <code>launch-mt5-api</code> command launched a flask api  in wine to interact with MetaTrader5. It is broker specific because in the future, this architecture should allow for multi-broker strategies.</p> <p>IMPORTANT: If it is the first time starting up the docker container, or if it has been rebuilt, log in the your MT5 account manually and click the allow autotrading button. If not, steps 3+ will not work.</p> <pre><code>releat start\nreleat launch-mt5-api metaquotes general\n</code></pre> <p>Note: - A demo metaquotes account can be found in the <code>releat/utils/configs/constants.py</code>. Alternatively you can create new credentials from the metaquotes website</p>"},{"location":"getting_started/basic_usage/#3-build-training-data","title":"3) Build training data","text":"<p>Build the features defined by the <code>feature_config.py</code> script and upload to Aerospike.</p> <pre><code>releat build-train-data t00001\n</code></pre> <p>The <code>t00001</code> config creates two feature groups: - one group for 30s timeframe - one group for 5m timeframe</p> <p>The features within the 30s timeframe feature group include: - average price - modified one-hot encoding of the different flag types - average spread</p> <p>The features within the 5m timeframe include: - average price - min price - max price - gradient of ticks</p> <p>Features are built from tick data and are scaled by: - clipping by percentile - power transformer - linear scaling - clipping for extreme values</p> <p>These features are then updated to Aerospike where the key is: <code>(&lt;environment&gt;, &lt;agent_version&gt;, &lt;integer&gt;)</code>, i.e. <code>('prod','t00001',10000)</code> The value for this example is:</p> <pre><code>{\n    \"date\": str,\n    \"30s\": list,\n    \"5m\": list,\n    \"price\": list\n}\n</code></pre> <p>The price here indicates the bid-ask for EURUSD for the next 2s. It is not as used an input into the training model, rather it is used to simulate slippage in the gym environment.</p>"},{"location":"getting_started/basic_usage/#4-train-model","title":"4) Train model","text":"<p>In this step, the RL model is defined in <code>agent_model.py</code>: - a class that extend Ray's rllib's Tensorflow model - simple example of gated residual network - allows arbitrary dict inputs - allows action masking (i.e. to block bad actions, i.e. a close action if no positions are open)</p> <p>The training process is defined in <code>agent_config.py</code>: - <code>gym_env</code> key defines the gym environments hyperparameters and is uploaded to aerospike so it can be dynamically changed during training (if necessary). It also define training hyperparameters such as number of episodes and training frequency. - keys with the prefix <code>rl_</code> map directly to Ray's rllib's training configurations</p> <pre><code>releat train t00001\n</code></pre> <p>Note: - If you do not have a gpu, in the <code>agent_config.py</code> file, change <code>agent_config['rl_resources']['num_gpus]</code> from 1 to 0. - Model performance can be tracked in tensorboard, where the default address is http://localhost:6006/ - Resource usage can be tracked by ray dashboard</p>"},{"location":"getting_started/basic_usage/#5-generate-signal","title":"5) Generate signal","text":"<p>Using the artifacts generated by the training process, this generate signal process is deployed to continuously: - extract data from MT5 - note if first run in a fresh install, manually log into MT5 account and click on the enable algortrading button. - build features - makes predictions by invoking the RL agent - pushes predictions to redis - loads the latest checkpoint</p> <p>The frequency of the prediction is controlled by the configs set in <code>agent_config.py</code></p> <pre><code>releat generate-signal t00001\n</code></pre>"},{"location":"getting_started/basic_usage/#6-launch-trader","title":"6) Launch trader","text":"<p>The trader is agent version agnostic (for now) and is deployed to: - gets the predictions from redis (in the future it will have capability to aggregate predictions from multiple different RL agents) - applies some risk logic (such as lot size scaling) - applies other operational logic (i.e. minimum position hold time, forced close at session close, etc.) - executes open or close actions for long or short positions</p> <pre><code>releat launch-trader\n</code></pre>"},{"location":"getting_started/installation/","title":"Installation","text":""},{"location":"getting_started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Linux or WSL (for windows machine, preferably Ubuntu 20.04)</li> </ul>"},{"location":"getting_started/installation/#installation_1","title":"Installation","text":""},{"location":"getting_started/installation/#1-clone-the-repositry","title":"1) Clone the repositry","text":"<pre><code>git clone https://github.com/releat215/releat.git\n</code></pre>"},{"location":"getting_started/installation/#2-navigate-to-repository-folder","title":"2) Navigate to repository folder","text":"<p>Assuming that the repository is cloned to the default destination, navigate to the repository.</p> <pre><code>cd releat\n</code></pre>"},{"location":"getting_started/installation/#3-build-or-download-docker-container","title":"3) Build or download docker container","text":"<p>Developing in the docker container is recommended because: - Trained RL agents can be easily deployed to multiple instances - Collaborators are working with the same stack and package versions - Provides utility for installing MetaTrader5 in wine</p> <p>The docker container can be build by:</p> <pre><code>docker build -t releat -f ./infrastructure/releat/Dockerfile .\n</code></pre> <p>Alternatively, the container has been pre-built and can be fetched from docker:</p> <pre><code>docker pull releat215/releat:1.0\n</code></pre> <p>Note: - Detailed notes on the components of the DockerFile are in the development notes</p>"},{"location":"getting_started/installation/#4-run-docker-container","title":"4) Run docker container","text":"<p>Run and connect to the docker container. Depending on your IDE, there are two main methods: - VSCode's Dev Container - connecting to a running docker container</p>"},{"location":"getting_started/installation/#vscodes-dev-container","title":"VSCode's Dev Container","text":"<p>The scripts for setting up VSCode's dev container is stored in <code>.devcontainer</code>. The following shows how to start up and connect to the dev container:</p> <p>GET PICTURE OF CONNECT TO DEV CONTAINER</p> <p>Note: - For more infromation on how to launch the dev container, see VSCode's documentation - Docker must be started - If you do not have gpus, deleted the line <code>'--gpus==all'</code> in the <code>runArgs</code> key of the <code>.devcontainer/devcontainer.json</code> file</p>"},{"location":"getting_started/installation/#connect-to-a-running-docker-container","title":"Connect to a running docker container","text":"<p>Firstly run the docker container:</p> <pre><code>docker run \\\n    --net host \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -v $(pwd):/workspaces/releat \\\n    -e DISPLAY \\\n    --gpus all \\\n    -it \\\n    --name releat \\\n    releat215/releat:1.0\n</code></pre> <p>Then you can connect to the running container:</p> <pre><code>docker exec -it releat /bin/bash\n</code></pre> <p>Note: - Detailed notes on the purpose of each argument can be found in the development notes - When running python scripts, make sure to navigate to correct folder and activate the environment: <code>cd /workspaces/releat &amp;&amp; source activate ./.venv</code></p>"},{"location":"getting_started/installation/#5-update-cli","title":"5) Update CLI","text":"<p>The CLI uses cached function. If you update the source code, the <code>releat</code> package needs to be rebuilt and re-installed to reflect updated / new functions:</p> <pre><code>source activate ./.venv\npoetry build\npip install --user ./dist/releat-0.0.1-py3-none-any.whl --force-reinstall --no-deps\npip uninstall releat -y\npoetry install\n</code></pre> <p>Note: - The final uninstall and install removes the installed wheel (with cached functions) and re-installs the package in editable mode so that futher edits can be made to the source code.</p>"},{"location":"getting_started/overview/","title":"Overview","text":"<p>discord server free</p>"},{"location":"troubleshooting/troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/troubleshooting/#metatrader5","title":"MetaTrader5","text":""},{"location":"troubleshooting/troubleshooting/#mt5-window-does-not-open","title":"MT5 window does not open","text":"<ol> <li>Check that when you run the docker container, you pass through the display with <code>-v /tmp/.X11-unix:/tmp/.X11-unix</code></li> <li>Restart your computer. Sometimes when open / closing / starting / stopping the container multiple times, some weird gui cache behaviour is triggered / locked and the container becomes unable to open new windows</li> <li>Delete container from docker and rebuild container, sometime a fresh install of MT5 just magically fixes the problem. You shouldn't lose any info / data because all the scripts and data available in your docker container mounted from the host.</li> </ol>"},{"location":"troubleshooting/troubleshooting/#cant-programmatically-log-in-to-mt5","title":"Can't programmatically log in to MT5","text":"<ol> <li>Manually log into MT5 account using the gui interface. When you first install MT5, the instance does not automatically connect to the metaquotes server (no idea why). The first log in must be manual, i.e. click to search through the list of brokers, type in your username and password. Subsequent connections to other brokers so work afterwards</li> </ol>"},{"location":"troubleshooting/troubleshooting/#cant-programmatically-download-data-trade-in-mt5","title":"Can't programmatically download data / trade in MT5","text":"<ol> <li>Check that you are logged in. If you cant log in see the question above.</li> <li>Check that the algotrading button is pressed. By default, the algotrading button is off</li> </ol>"}]}